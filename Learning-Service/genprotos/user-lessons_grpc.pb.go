// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/learning/user-lessons.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserLessonService_AddUserLesson_FullMethodName  = "/languagelearning.UserLessonService/AddUserLesson"
	UserLessonService_GetUserLessons_FullMethodName = "/languagelearning.UserLessonService/GetUserLessons"
)

// UserLessonServiceClient is the client API for UserLessonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserLessons xizmatini aniqlash
type UserLessonServiceClient interface {
	AddUserLesson(ctx context.Context, in *AddUserLessonRequest, opts ...grpc.CallOption) (*AddUserLessonResponse, error)
	GetUserLessons(ctx context.Context, in *GetUserLessonsRequest, opts ...grpc.CallOption) (*GetUserLessonsResponse, error)
}

type userLessonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLessonServiceClient(cc grpc.ClientConnInterface) UserLessonServiceClient {
	return &userLessonServiceClient{cc}
}

func (c *userLessonServiceClient) AddUserLesson(ctx context.Context, in *AddUserLessonRequest, opts ...grpc.CallOption) (*AddUserLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserLessonResponse)
	err := c.cc.Invoke(ctx, UserLessonService_AddUserLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLessonServiceClient) GetUserLessons(ctx context.Context, in *GetUserLessonsRequest, opts ...grpc.CallOption) (*GetUserLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLessonsResponse)
	err := c.cc.Invoke(ctx, UserLessonService_GetUserLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLessonServiceServer is the server API for UserLessonService service.
// All implementations must embed UnimplementedUserLessonServiceServer
// for forward compatibility
//
// UserLessons xizmatini aniqlash
type UserLessonServiceServer interface {
	AddUserLesson(context.Context, *AddUserLessonRequest) (*AddUserLessonResponse, error)
	GetUserLessons(context.Context, *GetUserLessonsRequest) (*GetUserLessonsResponse, error)
	mustEmbedUnimplementedUserLessonServiceServer()
}

// UnimplementedUserLessonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserLessonServiceServer struct {
}

func (UnimplementedUserLessonServiceServer) AddUserLesson(context.Context, *AddUserLessonRequest) (*AddUserLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLesson not implemented")
}
func (UnimplementedUserLessonServiceServer) GetUserLessons(context.Context, *GetUserLessonsRequest) (*GetUserLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLessons not implemented")
}
func (UnimplementedUserLessonServiceServer) mustEmbedUnimplementedUserLessonServiceServer() {}

// UnsafeUserLessonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLessonServiceServer will
// result in compilation errors.
type UnsafeUserLessonServiceServer interface {
	mustEmbedUnimplementedUserLessonServiceServer()
}

func RegisterUserLessonServiceServer(s grpc.ServiceRegistrar, srv UserLessonServiceServer) {
	s.RegisterService(&UserLessonService_ServiceDesc, srv)
}

func _UserLessonService_AddUserLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLessonServiceServer).AddUserLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLessonService_AddUserLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLessonServiceServer).AddUserLesson(ctx, req.(*AddUserLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLessonService_GetUserLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLessonServiceServer).GetUserLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLessonService_GetUserLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLessonServiceServer).GetUserLessons(ctx, req.(*GetUserLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLessonService_ServiceDesc is the grpc.ServiceDesc for UserLessonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLessonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "languagelearning.UserLessonService",
	HandlerType: (*UserLessonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserLesson",
			Handler:    _UserLessonService_AddUserLesson_Handler,
		},
		{
			MethodName: "GetUserLessons",
			Handler:    _UserLessonService_GetUserLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/learning/user-lessons.proto",
}
