// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: languages.proto

package learn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LanguageService_GetLanguage_FullMethodName    = "/languagelearning.LanguageService/GetLanguage"
	LanguageService_ListLanguages_FullMethodName  = "/languagelearning.LanguageService/ListLanguages"
	LanguageService_CreateLanguage_FullMethodName = "/languagelearning.LanguageService/CreateLanguage"
	LanguageService_UpdateLanguage_FullMethodName = "/languagelearning.LanguageService/UpdateLanguage"
	LanguageService_DeleteLanguage_FullMethodName = "/languagelearning.LanguageService/DeleteLanguage"
)

// LanguageServiceClient is the client API for LanguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Language xizmatini aniqlash
type LanguageServiceClient interface {
	// Til haqida ma'lumot olish uchun RPC
	GetLanguage(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*GetLanguageResponse, error)
	// Barcha tillar ro'yxatini olish uchun RPC
	ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error)
	// Tilni yaratish uchun RPC
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error)
	// Tilni yangilash uchun RPC
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error)
	// Tilni o'chirish uchun RPC
	DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*DeleteLanguageResponse, error)
}

type languageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageServiceClient(cc grpc.ClientConnInterface) LanguageServiceClient {
	return &languageServiceClient{cc}
}

func (c *languageServiceClient) GetLanguage(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*GetLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageService_GetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguagesResponse)
	err := c.cc.Invoke(ctx, LanguageService_ListLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageService_CreateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageService_UpdateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*DeleteLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLanguageResponse)
	err := c.cc.Invoke(ctx, LanguageService_DeleteLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageServiceServer is the server API for LanguageService service.
// All implementations must embed UnimplementedLanguageServiceServer
// for forward compatibility
//
// Language xizmatini aniqlash
type LanguageServiceServer interface {
	// Til haqida ma'lumot olish uchun RPC
	GetLanguage(context.Context, *GetLanguageRequest) (*GetLanguageResponse, error)
	// Barcha tillar ro'yxatini olish uchun RPC
	ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error)
	// Tilni yaratish uchun RPC
	CreateLanguage(context.Context, *CreateLanguageRequest) (*CreateLanguageResponse, error)
	// Tilni yangilash uchun RPC
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*UpdateLanguageResponse, error)
	// Tilni o'chirish uchun RPC
	DeleteLanguage(context.Context, *DeleteLanguageRequest) (*DeleteLanguageResponse, error)
	mustEmbedUnimplementedLanguageServiceServer()
}

// UnimplementedLanguageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLanguageServiceServer struct {
}

func (UnimplementedLanguageServiceServer) GetLanguage(context.Context, *GetLanguageRequest) (*GetLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguages not implemented")
}
func (UnimplementedLanguageServiceServer) CreateLanguage(context.Context, *CreateLanguageRequest) (*CreateLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) UpdateLanguage(context.Context, *UpdateLanguageRequest) (*UpdateLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) DeleteLanguage(context.Context, *DeleteLanguageRequest) (*DeleteLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguage not implemented")
}
func (UnimplementedLanguageServiceServer) mustEmbedUnimplementedLanguageServiceServer() {}

// UnsafeLanguageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageServiceServer will
// result in compilation errors.
type UnsafeLanguageServiceServer interface {
	mustEmbedUnimplementedLanguageServiceServer()
}

func RegisterLanguageServiceServer(s grpc.ServiceRegistrar, srv LanguageServiceServer) {
	s.RegisterService(&LanguageService_ServiceDesc, srv)
}

func _LanguageService_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_GetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).GetLanguage(ctx, req.(*GetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_ListLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).ListLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_ListLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).ListLanguages(ctx, req.(*ListLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_CreateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_UpdateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_DeleteLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).DeleteLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageService_DeleteLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).DeleteLanguage(ctx, req.(*DeleteLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageService_ServiceDesc is the grpc.ServiceDesc for LanguageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "languagelearning.LanguageService",
	HandlerType: (*LanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguage",
			Handler:    _LanguageService_GetLanguage_Handler,
		},
		{
			MethodName: "ListLanguages",
			Handler:    _LanguageService_ListLanguages_Handler,
		},
		{
			MethodName: "CreateLanguage",
			Handler:    _LanguageService_CreateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _LanguageService_UpdateLanguage_Handler,
		},
		{
			MethodName: "DeleteLanguage",
			Handler:    _LanguageService_DeleteLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "languages.proto",
}
